name: Azure Pipelines
variables:
  azureServiceConnectionId: '0aec1693-7042-4edf-bc97-a1108378705b'
  python.version: '3.7.6'
stages:
- stage: Running_Infastructure_as_Code
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-20.04
    steps:
    # Variable file for creating terraform resources
    - task: DownloadSecureFile@1
      name: downloadtfvars
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'

    # Needed for Terraform VM deployment
    - task: DownloadSecureFile@1
      name: downloadSSHKey
      displayName: Download SSH Key
      inputs:
        secureFile: 'id_rsa.pub'
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDYbh9oN0L5tI7+3cUHCQrRVV/ae76cGDq+ZiN91EYaBT577Nuy44OnzU4wyDW8wPAbwMzqYgsoDHNi9Yz3SzFSUock3b0+JlV4e3HhxPBH9z8DbNav8TehZrLQS7dAt4tUGef/Ozyft5oBTMXw0LmWp/5EwdahohcKQSCvYSl1kRYUCv9MVGCSZgcLVGbx3Z00wbMP8ZTEPtPYs0LfCcFpHKOnEYjfW0hQFtjteNo6QKFaDB1GRovGg7ksdhRihrV1AAZyBSpKjcAMuIcJVlWTq2XOZNPV7DJO1c9l2xN+OAyqM/TsIpwvInv+KvmzDoGRhwy0oGuyazcWPSc7bxp1VPJN7mdtrCdIuRIOayzKYwFtYDNlpDMn8jlFSn3uAjZj31Z+9brscA921laIbffq3SLvGjYaoND5S4Gura5ckfvrDVWiHGWy9VaPFoSTEvIJMbjXdSFv0B5h6YzfMBeMNOM5nfeOvZfF6FfV5kVfnWNIJJkON7Amp7RM2pQyS0k= tranngocduy@MacBook-Pro-cua-Tran.local'
        sshPassphrase: '123'
        sshKeySecureFile: 'id_rsa'
    - task: CopyFiles@2
      displayName: Copy variable file to terraform folder
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '**'
        TargetFolder: '$(System.DefaultWorkingDirectory)/terraform'
        OverWrite: true
    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV3@3
      displayName: 'Init Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'devops_azure_udacity_03'
        backendAzureRmStorageAccountName: 'tfstate188448554'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV3@3
      displayName: 'Validate Terraform'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV3@3
      displayName: 'Plan Terraform'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    - task: TerraformTaskV3@3
      displayName: 'Apply Terraform'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-20.04
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium Files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        artifact: 'selenium'
        publishLocation: 'pipeline'
    
- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: ubuntu-20.04
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'd73758b5-d4cb-4e2a-afc8-87645401f35b'
              appType: 'webApp'
              appName: 'ud-az-devops-03-app-AppService'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              appSettings: '-WEBSITE_RUN_FROM_PACKAGE 0'
  - deployment: VMDeploy
    displayName: 'Deploy VM'
    environment:
      name:  test
      resourceType: VirtualMachine
      tags: devops03
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium


                export PATH=$PATH:/home/azureuser/chromedriver_linux64/
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'selenium'
              targetPath: '$(Pipeline.Workspace)/selenium'
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/selenium/*.zip'
              destinationFolder: '$(Pipeline.Workspace)/selenium/tests'
              cleanDestinationFolder: true
              overwriteExistingFiles: true
          - task: Bash@3
            displayName: 'Show file in folder selenium'
            inputs:
              targetType: 'inline'
              script: |
                echo "$PWD"
                
                echo 'Show folder selenium/tests'
                ls -1 tests 

                echo 'remove zip file'
                rm *.zip
                echo 'Create folder selenium/logs'
                mkdir -p logs

                echo 'Show folder selenium'
                ls -1 
              workingDirectory: '$(Pipeline.Workspace)/selenium'
- stage: Integration_Test
  jobs:
    - job: Running_Integration_Test_With_Newman_Posman
      pool:
        vmImage: ubuntu-20.04
      steps:
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'sudo npm install -g newman'
          workingDirectory: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run AzureDevOpsRegressionTest.postman_collection.json -e StarterApi.postman_environment.json --reporters cli,junit --reporter-junit-export junit-regression-report.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      - task: CmdLine@2
        displayName: Run Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run AzureDevOpsValidationTest.postman_collection.json -e StarterApi.postman_environment.json --reporters cli,junit --reporter-junit-export junit-validation-report.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit-*-report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          testRunTitle: 'Publish test results'

- stage: JMeter_Tests
  jobs:
    - job: Running_Performance_Tests_With_JMeter
      pool:
        vmImage: ubuntu-20.04
      steps:
      - task: JMeterInstaller@0
        displayName: 'Install JMeter'
        inputs:
          jmeterVersion: '5.4.2'
      - task: Bash@3
        displayName: 'Run JMeter Endurance Tests'
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p log
            jmeter -n -t EnduranceTests.jmx \
            -l log/EnduranceTestsResults.csv \
            -e -o log/EnduranceTestsReport
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
      - task: Bash@3
        displayName: 'Run JMeter Stress Tests'
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            jmeter -n -t StressTests.jmx \
            -l log/StressTestsResults.csv \
            -e -o log/StressTestsReport
            ls -1 log
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
      
      - task: publishhtmlreport@1
        displayName: 'Export JMeter Stress Tests Report'
        inputs:
          htmlType: 'Jmeter'
          JmeterReportsPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/StressTestsReport'
      - task: publishhtmlreport@1
        displayName: 'Export JMeter Endurance Tests Report'
        inputs:
          htmlType: 'Jmeter'
          JmeterReportsPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/EnduranceTestsReport'
      - task: ArchiveFiles@2
        displayName: "Archive Report file to zip"
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/Report-$(Build.BuildId).zip'
          replaceExistingArchive: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/log/Report-$(Build.BuildId).zip'
          publishLocation: 'pipeline'
      - task: Bash@3
        displayName: 'Print jmeter log'
        inputs:
          targetType: 'inline'
          script: 'cat jmeter.log'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'

- stage: Selenium_Testing
  jobs:
  - deployment: VMSeleniumTests
    displayName: 'Running Selenium tests'
    environment:
      name: test
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              displayName: 'Run Selenium tests'
              inputs:
                targetType: 'inline'
                script: |
                  # Set Path environment 
                  export PATH=$PATH:/home/azureuser/chromedriver_linux64/
                  #run test
                  python3 login.py
                  sudo chmod 775 ../logs/ui-logs.log
                  echo 'print logs'
                  cat ../logs/ui-logs.log
                workingDirectory: '$(Pipeline.Workspace)/selenium/tests'